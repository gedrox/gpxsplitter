// Generated by CoffeeScript 1.7.1
var App, DownloadLinks, DownloadView, FileView, HRLine, Selector, a, button, div, form, g, h1, input, p, path, rect, svg, _ref;

_ref = React.DOM, div = _ref.div, form = _ref.form, input = _ref.input, p = _ref.p, h1 = _ref.h1, a = _ref.a, button = _ref.button, svg = _ref.svg, rect = _ref.rect, path = _ref.path, g = _ref.g;

App = React.createClass({
  getInitialState: function() {
    return {
      xml: null,
      cutoff: null,
      updateCutoff: this.updateCutoff
    };
  },
  handleFile: function(e) {
    var reader;
    reader = new FileReader();
    reader.onload = (function(_this) {
      return function(evt) {
        var parser, xml;
        parser = new DOMParser();
        xml = parser.parseFromString(evt.target.result, 'text/xml');
        return _this.setState({
          xml: xml
        });
      };
    })(this);
    return reader.readAsText(e.target.files[0]);
  },
  updateCutoff: function(newCutoff) {
    return this.setState({
      cutoff: newCutoff
    });
  },
  render: function() {
    return div({}, [
      h1({}, "Strava Split"), this.state.xml == null ? p({}, "Upload a gpx file") : null, this.state.xml == null ? form({}, input({
        type: 'file',
        onChange: this.handleFile
      })) : null, this.state.xml != null ? FileView(this.state) : null, this.state.cutoff != null ? DownloadView(this.state) : null
    ]);
  }
});

FileView = React.createClass({
  render: function() {
    var allpoints, bars, barwidth, data, ele, end, h, hr, i, maxEle, maxHR, maxTime, name, point, start, timestamp, trkpts, _i, _j, _ref1, _ref2, _ref3;
    name = this.props.xml.querySelector('name').innerHTML;
    start = Date.parse(this.props.xml.querySelector('trkseg trkpt:first-child time').innerHTML);
    end = Date.parse(this.props.xml.querySelector('trkseg trkpt:last-child time').innerHTML);
    data = {};
    trkpts = this.props.xml.getElementsByTagName('trkpt');
    _ref1 = [-Infinity, -Infinity, -Infinity], maxEle = _ref1[0], maxHR = _ref1[1], maxTime = _ref1[2];
    for (i = _i = 0, _ref2 = trkpts.length - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
      point = trkpts[i];
      timestamp = Date.parse(point.getElementsByTagName('time')[0].innerHTML);
      data[timestamp - start] = {
        lat: point.getAttribute('lat'),
        lon: point.getAttribute('lon'),
        ele: ele = point.getElementsByTagName('ele')[0].innerHTML,
        hr: hr = point.getElementsByTagName('hr')[0].innerHTML
      };
      maxEle = Math.max(maxEle, ele);
      maxHR = Math.max(maxHR, hr);
      maxTime = Math.max(maxTime, timestamp);
    }
    bars = [];
    allpoints = this.props.xml.getElementsByTagName('ele');
    barwidth = 600 / allpoints.length;
    for (i = _j = 0, _ref3 = allpoints.length - 1; 0 <= _ref3 ? _j <= _ref3 : _j >= _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
      h = allpoints[i].innerHTML;
      bars.push(rect({
        height: h,
        width: barwidth,
        x: i * barwidth,
        y: 100 - h,
        fill: 'black',
        stroke: 'none'
      }));
    }
    return div({
      className: 'fileView'
    }, [
      h1({}, name), svg({
        height: 100,
        width: 600
      }, [
        g({}, HRLine({
          maxTime: maxTime,
          maxHR: maxHR,
          start: start,
          data: data
        })), g({}, bars)
      ]), p({}, start + " to " + end), Selector({
        start: start,
        end: end,
        cutoff: this.props.cutoff,
        updateCutoff: this.props.updateCutoff
      })
    ]);
  }
});

HRLine = React.createClass({
  render: function() {
    var duration, hrline, obj, sfx, sfy, t, _ref1;
    duration = this.props.maxTime - this.props.start;
    sfx = 600 / duration;
    sfy = 100 / this.props.maxHR;
    hrline = "M 0 " + this.props.data[0].hr + " L";
    _ref1 = this.props.data;
    for (t in _ref1) {
      obj = _ref1[t];
      hrline += " " + (t * sfx) + " " + (obj.hr * -sfy);
    }
    return path({
      d: hrline,
      stroke: '#dd0447',
      strokeWidth: '1.5',
      fill: 'none',
      transform: "translate(0,100)"
    });
  }
});

Selector = React.createClass({
  getInitialState: function() {
    return {
      value: (this.props.start + this.props.end) / 2
    };
  },
  handleChange: function() {
    var val;
    val = this.refs.slider.getDOMNode().value;
    return this.props.updateCutoff(val);
  },
  render: function() {
    return input({
      type: 'range',
      min: this.props.start,
      max: this.props.end,
      defaultValue: this.props.cutoff,
      ref: 'slider',
      onChange: this.handleChange
    });
  }
});

DownloadView = React.createClass({
  getInitialState: function() {
    return {
      computed: null
    };
  },
  handleClick: function() {
    return this.setState({
      computed: this.props.cutoff
    });
  },
  render: function() {
    return div({
      className: 'downloadView',
      ref: 'container'
    }, this.state.computed === this.props.cutoff ? DownloadLinks(this.props) : button({
      onClick: this.handleClick
    }, "Split"));
  }
});

DownloadLinks = React.createClass({
  render: function() {
    var firstTime, href1, href2, newXMLString1, newXMLString2, serializer, xml1, xml2;
    xml1 = this.props.xml;
    xml2 = xml1.cloneNode(true);
    [].forEach.call(xml1.querySelectorAll('trkseg time'), (function(_this) {
      return function(t) {
        if (Date.parse(t.innerHTML) >= _this.props.cutoff) {
          return t.parentNode.remove();
        }
      };
    })(this));
    xml1.querySelector('trk name').innerHTML += " (part 1)";
    [].forEach.call(xml2.querySelectorAll('trkseg time'), (function(_this) {
      return function(t) {
        if (Date.parse(t.innerHTML) < _this.props.cutoff) {
          return t.parentNode.remove();
        }
      };
    })(this));
    xml2.querySelector('trk name').innerHTML += " (part 2)";
    firstTime = xml2.querySelector('trk time').innerHTML;
    xml2.querySelector('metadata time').innerHTML = firstTime;
    serializer = new XMLSerializer();
    newXMLString1 = serializer.serializeToString(xml1);
    href1 = "data:application/gpx+xml;base64," + btoa(newXMLString1);
    newXMLString2 = serializer.serializeToString(xml2);
    newXMLString2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + newXMLString2;
    href2 = "data:application/gpx+xml;base64," + btoa(newXMLString2);
    return div({}, [
      p({}, "Right click and select 'Save link as'"), a({
        href: href1
      }, "Download Part 1"), a({
        href: href2
      }, "Download Part 2")
    ]);
  }
});
